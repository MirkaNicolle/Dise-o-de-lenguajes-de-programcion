{
/* Definición de parser */

/* INICIA sección de TOKENS */
%token IDENTIFIER
%token NUMBER
%token PLUS
%token MINUS
%token MULT
%token DIV
%token LPAREN
%token RPAREN
%token POWER
%token MOD
%token FUNC
IGNORE WS
/* FINALIZA sección de TOKENS */

%%

/* INICIA sección de PRODUCCIONES */
rule expression =
    expression PLUS term                 { return create_node('add', expression, term) }
  | expression MINUS term                { return create_node('subtract', expression, term) }
  | term                                 { return term }
;

rule term =
    term MULT factor                     { return create_node('multiply', term, factor) }
  | term DIV factor                      { return create_node('divide', term, factor) }
  | term MOD factor                      { return create_node('modulus', term, factor) }
  | factor                               { return factor }
;

rule factor =
    factor POWER primary                 { return create_node('power', factor, primary) }
  | primary                              { return primary }
;

rule primary =
    LPAREN expression RPAREN             { return expression }
  | func_call                            { return func_call }
  | IDENTIFIER                           { return create_leaf('identifier', Identifier) }
  | NUMBER                               { return create_leaf('number', Number) }
;

rule func_call =
    FUNC LPAREN arguments RPAREN         { return create_node('func_call', FUNC, arguments) }
;

rule arguments =
    expression                           { return create_node('arguments', expression) }
  | arguments COMMA expression           { return add_argument(arguments, expression) }
;
/* FINALIZA sección de PRODUCCIONES */

}

{
print("Parser generation completed.")
}